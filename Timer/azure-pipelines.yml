trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
  persistCredentials: true
  fetchDepth: 0

- task: gitversion/setup@0
  displayName: 'Install GitTools'
  inputs:
    versionSpec: '5.x'

# Retrieve Pull Request Description
- task: PullRequestDescription@0
  name: RetrievePullRequestDescription
  displayName: Retrieve Pull Request description
  inputs:
    action: 'view'
    outputVariable: 'PullRequest.DescriptionContent'
    isOutput: true
    stripIdentifiers: false

# Add git commit message that will be picked up by GitVersion ("+semver: patch/minor/major")
# Depending on the Pull Request description, where the developer has marked the type of change
- task: PowerShell@2
  displayName: Add git commit message for SemVer
  inputs:
    targetType: inline
    script: |
      Write-Host "Configuring git author info.." -ForegroundColor Cyan
      git config user.email "coda1337@gmail.com"
      git config user.name "Justin Ward"
      Write-Host "Doing git checkout..." -ForegroundColor Cyan
      git checkout -b $("$(System.PullRequest.SourceBranch)".replace('refs/heads/', ''))
      Write-Host "Checking Pull Request description..." -ForegroundColor Cyan
      $PRdesc = "$(RetrievePullRequestDescription.PullRequest.DescriptionContent)"
      if ($PRdesc -match '(\[x\] \bFix\b)') {
        Write-Host "Adding git (empty) commit message to mark this branch as a 'patch' SemVer increment." -ForegroundColor Cyan
        git commit -a -m "+semver: patch [skip azurepipelines]" --allow-empty
      } elseif ($PRdesc -match '(\[x\] \bFeature\b)') {
        Write-Host "Adding git (empty) commit message to mark this branch as a 'minor' SemVer increment." -ForegroundColor Cyan
        git commit -a -m "+semver: minor [skip azurepipelines]" --allow-empty
      } elseif ($PRdesc -match '(\[x\] \bBig\b)') {
        Write-Host "Adding git (empty) commit message to mark this branch as a 'major' SemVer increment." -ForegroundColor Cyan
        git commit -a -m "+semver: major [skip azurepipelines]" --allow-empty
      } else {
        Write-Host "##vso[task.LogIssue type=error;]Please select the type of change in the Pull Request description, and Re-queue the validation." -ForegroundColor Cyan
        $PRdesc
        exit 1
      }
      Write-Host "Doing git push.." -ForegroundColor Cyan
      git push --set-upstream origin $("$(System.PullRequest.SourceBranch)".replace('refs/heads/', ''))
      Write-Host "Done." -ForegroundColor Cyan

- task: gitversion/execute@0
  displayName: 'Calculate SemVer'
  name: Version
  inputs:
      useConfigFile: true
      configFilePath: './GitVersion.yml'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(projects)'
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '$(projects)'
    versioningScheme: 'byEnvVar'
    versionEnvVar: GitVersion_MajorMinorPatch
    packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    nobuild: true

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: 'nuget pipeline'

- script: |
    git tag $(GitVersion.NugetVersionV2)
    git push origin $(GitVersion.NugetVersionV2)
  workingDirectory: $(Build.SourcesDirectory)

- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'Gamedev/gamedev'